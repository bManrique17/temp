/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TSP;

import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;
import java.util.Set;
import javax.swing.JPanel;
import org.graphstream.algorithm.ConnectedComponents;
import org.graphstream.algorithm.community.EpidemicCommunityAlgorithm;
import org.graphstream.algorithm.Dijkstra;
import org.graphstream.algorithm.Kruskal;
import org.graphstream.graph.Edge;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.swingViewer.ViewPanel;
import org.graphstream.ui.view.Viewer;
import org.graphstream.ui.spriteManager.*;

/**
 *
 * @author root
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        graph = new SingleGraph("Grafo Principal");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        mala = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        normal = new javax.swing.JPanel();
        sol = new javax.swing.JPanel();
        nicolle = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("generar");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        mala.setText("Mala");
        mala.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                malaMouseClicked(evt);
            }
        });

        jButton3.setText("eficiente");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        normal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout normalLayout = new javax.swing.GroupLayout(normal);
        normal.setLayout(normalLayout);
        normalLayout.setHorizontalGroup(
            normalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 516, Short.MAX_VALUE)
        );
        normalLayout.setVerticalGroup(
            normalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 473, Short.MAX_VALUE)
        );

        sol.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout solLayout = new javax.swing.GroupLayout(sol);
        sol.setLayout(solLayout);
        solLayout.setHorizontalGroup(
            solLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 539, Short.MAX_VALUE)
        );
        solLayout.setVerticalGroup(
            solLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
        );

        nicolle.setText("jButton2");
        nicolle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nicolleMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jButton1)
                        .addGap(70, 70, 70)
                        .addComponent(mala)
                        .addGap(24, 24, 24)
                        .addComponent(nicolle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(normal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(sol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(normal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(mala))
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(nicolle))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MontarGrafo(JPanel pizarra, Graph grafo, String styleSheet) {
        //limpiar pizarra
        pizarra.removeAll();

        //agregar como atributo al grafo la hoja CSS de formato de impresion
        grafo.addAttribute("ui.stylesheet", styleSheet);

        //viewer para capturar el grafo
        Viewer viewer = new Viewer(grafo, Viewer.ThreadingModel.GRAPH_IN_GUI_THREAD);
        ViewPanel viewPanel = viewer.addDefaultView(false);
        viewer.enableAutoLayout();

        //agregar el viewer a la pizarra
        pizarra.add(viewPanel);
        pizarra.updateUI();
    }

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        double duration = 0;
        boolean flag = true;
        ciclo = new ArrayList();
        while (flag || ciclo.isEmpty()) {
            duration = 0.0;
            x = 0;
            graph = new SingleGraph("Grafo Principal");
            Random numAleatorio = new Random();
            //int numero_nodos = numAleatorio.nextInt(10)+1;
            int numero_nodos = nodos;
            styleSheet = "";
            for (int i = 0; i < numero_nodos; i++) {
                graph.addNode((i) + "").addAttribute("ui.label", (i) + "");
                styleSheet += "node#" + (i) + "{" + "size:40px;" + "text-color:blue;" + "text-size:25px;" + "fill-color:red;}";
                int x = numAleatorio.nextInt(100);
                int y = numAleatorio.nextInt(100);
                graph.getNode((i) + "").addAttribute("punto", (x + "," + y));
            }
            int numAristas = numAleatorio.nextInt(numero_nodos);
            int contAristas = 0;
            matriz = new int[numero_nodos][numero_nodos];
            for (int i = 0; i < numero_nodos; i++) {
                for (int j = 0; j < numero_nodos; j++) {
                    matriz[i][j] = -1;
                }
            }
            for (int i = 0; i < numero_nodos; i++) {
                for (int j = 0; j < numero_nodos; j++) {
                    if (i == j) {
                        continue;
                    } else if (matriz[j][i] != -1) {
                        continue;
                    }
                    int poner_arista = numAleatorio.nextInt(10);

                    if (true) {
                        String id = contAristas + "";
                        matriz[i][j] = contAristas;
                        matriz[j][i] = contAristas;
                        contAristas++;
                        graph.addEdge(id, i, j, false);
                        Edge temp = graph.getEdge(id);
                        double peso = calcularDistancia(temp.getNode0().getAttribute("punto"), temp.getNode1().getAttribute("punto"));
                        peso = (double) Math.round(peso * 100d) / 100d;
                        graph.getEdge(id).addAttribute("peso", peso);
                        graph.getEdge(id).addAttribute("ui.label", peso);
                        graph.getEdge(id).addAttribute("peso", peso);
                        graph.getEdge(id).addAttribute("opt", "no");
                        Edge edge = graph.getEdge(id);
                        //graph.getEdge(i+"-"+j).addAttribute("color", peso);
                        styleSheet += "edge#" + edge.getId() + "{fill-color:black;size:1px;" + "text-size:15px;}";
                    }
                }
            }
            ConnectedComponents conectedComponents = new ConnectedComponents();
            conectedComponents.init(graph);
            //reali<ar algoritmo
            conectedComponents.compute();

            //agrega a la lista de puntos de articulacion el nodo si el grafo se dividio en subgrafos
            if (conectedComponents.getConnectedComponentsCount() == 1) {
                flag = false;
            } else {
                continue;
            }

            int filas = 1;
            for (int i = 1; i <= graph.getNodeCount(); i++) {
                filas *= i;
            }
            codificacion = new int[filas][graph.getNodeCount()];
            for (int i = 0; i < filas; i++) {
                for (int j = 0; j < graph.getNodeCount(); j++) {
                    codificacion[i][j] = -1;
                }
            }
            movimientos();
/*
            for (int i = 0; i < matriz.length; i++) {
                for (int j = 0; j < matriz[0].length; j++) {
                    System.out.print(matriz[i][j] + " ");
                }
                System.out.println("");
            }
*/
            double pequeno = 99999999;

            long startTime = System.nanoTime();

            //System.out.println("Factorial:");
            //System.out.println(factorial_i(100));
            //System.out.println("el tiempo fue de: " + "\n" + duration + " milisegundos");
            for (int i = 0; i < codificacion.length; i++) {
                ArrayList<Edge> ciclo2 = new ArrayList();
                double peso = 0;
                int j = 0;
                for (j = 0; j < codificacion[i].length - 1; j++) {
                    if (matriz[codificacion[i][j]][codificacion[i][j + 1]] != -1) {
                        Edge edge = graph.getEdge(matriz[codificacion[i][j]][codificacion[i][j + 1]]);
                        peso += (double) edge.getAttribute("peso");
                        ciclo2.add(edge);
                    } else {
                        break;
                    }
                }
                if (j == codificacion[i].length - 1 && matriz[codificacion[i][codificacion[0].length - 1]][codificacion[i][0]] != -1) {
                    Edge edge1 = graph.getEdge(matriz[codificacion[i][codificacion[0].length - 1]][codificacion[i][0]]);
                    peso += (double) edge1.getAttribute("peso");
                    ciclo2.add(edge1);
                    if (peso < pequeno) {
                        pequeno = peso;
                        ciclo = ciclo2;
                    }
                }
            }
            System.out.println("TAMANO CAMINO: "+pequeno);
            long endTime = System.nanoTime();
            duration = (double) ((endTime - startTime) / 1e6);
            Iterator N = graph.getEdgeIterator();
            while (N.hasNext()) {
                Edge next = (Edge) N.next();
                next.setAttribute("sol", "no");
            }

            String hola = styleSheet;
            for (int i = 0; i < ciclo.size(); i++) {
                ciclo.get(i).setAttribute("sol", "si");
                String ID = ciclo.get(i).getId();
                hola += "edge#" + ID + "{fill-color:green;size:4px;" + "text-size:15px;}";
            }

            SingleGraph graph_copy = new SingleGraph("Grafo copia");
            Iterator<Node> nodos = graph.getNodeIterator();
            Iterator<Edge> aristas = graph.getEdgeIterator();

            //copia cada nodo, agrega su label nombre si el parametro lo requiere
            while (nodos.hasNext()) {
                Node nodoTemp = nodos.next();
                String nombreNodo = nodoTemp.toString();
                graph_copy.addNode(nombreNodo).addAttribute("ui.label", nombreNodo);
            }
            int contadorAristas = 0;
            while (aristas.hasNext()) {
                Edge aristaTemp = aristas.next();
                if (aristaTemp.getAttribute("sol").equals("no")) {
                    hola += "edge#" + aristaTemp.getId() + "{visibility-mode:hidden;}";
                }
                String nombreNodo1 = aristaTemp.getNode0().toString();
                String nombreNodo2 = aristaTemp.getNode1().toString();

                graph_copy.addEdge(contadorAristas + "", nombreNodo1, nombreNodo2, true);
                graph_copy.getEdge(contadorAristas).addAttribute("peso", (Object) aristaTemp.getAttribute("peso"));
                graph_copy.getEdge(contadorAristas).addAttribute("ui.label", (Object) aristaTemp.getAttribute("peso"));
                contadorAristas++;

            }
            graph_copy.addAttribute("ui.stylesheet", hola);
            graph_copy.display();
            //MontarGrafo(sol, graph_copy, hola);
        }

        graph.addAttribute("ui.stylesheet", styleSheet);
        //MontarGrafo(normal, graph, styleSheet);
        graph.display();
        System.out.println("DURATION OPTIMO: " + duration);
        Iterator NN = graph.getNodeIterator();
        cities = new ArrayList();
        while (NN.hasNext()) {
            Node next = (Node) NN.next();
            String arreglo[] = ((String) next.getAttribute("punto")).split(",");
            //System.out.println(next.getId() + " " + arreglo[0] + " " + arreglo[1]);
            float x = Float.parseFloat(arreglo[0] );
            float y = Float.parseFloat(arreglo[1]);
            //Use Java's built in Point2D type to hold a city
            Point2D city = new Point2D.Float(x, y);
            cities.add(city);
        }
                
        nicolle();
        
        String hola = styleSheet;
        Iterator<Edge> aristas1 = graph.getEdgeIterator();
        while (aristas1.hasNext()) {
            
            Edge temp = (Edge) aristas1.next();
            double x1, y1, x2, y2;
            String p1 = temp.getNode0().getAttribute("punto");
            
            String p2 = temp.getNode1().getAttribute("punto");
            x1 = Double.parseDouble(p1.substring(0, p1.indexOf(",")));
            y1 = Double.parseDouble(p1.substring(p1.indexOf(",") + 1, p1.length()));
            x2 = Double.parseDouble(p2.substring(0, p2.indexOf(",")));
            y2 = Double.parseDouble(p2.substring(p2.indexOf(",") + 1, p2.length()));
            for (int i = 0; i < opt_lista.size() - 1; i++) {
                //System.out.println("1: "+opt_lista.get(i));
                String Poi1 = opt_lista.get(i);
                String Poi2 = opt_lista.get(i + 1);
                String PP1 = x1 + "," + y1;
                String PP2 = x2 + "," + y2;
                if (Poi1.equals(PP1)) {
                    if (Poi2.equals(PP2)) {
                        String ID = temp.getId();
                        hola += "edge#" + ID + "{fill-color:orange;size:4px;" + "text-size:15px;}";
                        temp.setAttribute("opt", "si");
                    }
                } else if (Poi1.equals(PP2)) {
                    if (Poi2.equals(PP1)) {
                        String ID = temp.getId();
                        hola += "edge#" + ID + "{fill-color:orange;size:4px;" + "text-size:15px;}";
                        temp.setAttribute("opt", "si");
                    }
                }
            }
            String Poi1 = opt_lista.get(0);
            String Poi2 = opt_lista.get(opt_lista.size() - 1);
            String PP1 = x1 + "," + y1;
            String PP2 = x2 + "," + y2;
            if (Poi1.equals(PP1)) {
                if (Poi2.equals(PP2)) {
                    String ID = temp.getId();
                    hola += "edge#" + ID + "{fill-color:orange;size:4px;" + "text-size:15px;}";
                    temp.setAttribute("opt", "si");
                }
            } else if (Poi1.equals(PP2)) {
                if (Poi2.equals(PP1)) {
                    String ID = temp.getId();
                    hola += "edge#" + ID + "{fill-color:orange;size:4px;" + "text-size:15px;}";
                    temp.setAttribute("opt", "si");
                }
            }

            /*
            if(temp.getNode0().getAttribute("punto")){
                ciclo.get(i).setAttribute("opt", "si");
                String ID = ciclo.get(i).getId();
                hola += "edge#" + ID + "{fill-color:green;size:4px;" + "text-size:15px;}";
            }*/
        }
        SingleGraph graph_copy = new SingleGraph("Grafo copia");
        Iterator<Node> nodos = graph.getNodeIterator();

        Iterator<Edge> aristas = graph.getEdgeIterator();

        //copia cada nodo, agrega su label nombre si el parametro lo requiere
        while (nodos.hasNext()) {
            Node nodoTemp = nodos.next();
            String nombreNodo = nodoTemp.toString();
            graph_copy.addNode(nombreNodo).addAttribute("ui.label", nombreNodo);

        }
        int contadorAristas = 0;
        while (aristas.hasNext()) {
            Edge aristaTemp = aristas.next();
            if (aristaTemp.getAttribute("opt").equals("no")) {
                hola += "edge#" + aristaTemp.getId() + "{visibility-mode:hidden;}";
            }
            String nombreNodo1 = aristaTemp.getNode0().toString();
            String nombreNodo2 = aristaTemp.getNode1().toString();

            graph_copy.addEdge(contadorAristas + "", nombreNodo1, nombreNodo2, true);
            graph_copy.getEdge(contadorAristas).addAttribute("peso", (Object) aristaTemp.getAttribute("peso"));
            graph_copy.getEdge(contadorAristas).addAttribute("ui.label", (Object) aristaTemp.getAttribute("peso"));
            contadorAristas++;

        }
        graph_copy.addAttribute("ui.stylesheet", hola);
        graph_copy.display();
    }//GEN-LAST:event_jButton1MouseClicked
    private double calcularDistancia(String p1, String p2) {
        double x1, y1, x2, y2;
        x1 = Double.parseDouble(p1.substring(0, p1.indexOf(",")));
        y1 = Double.parseDouble(p1.substring(p1.indexOf(",") + 1, p1.length()));
        x2 = Double.parseDouble(p2.substring(0, p2.indexOf(",")));
        y2 = Double.parseDouble(p2.substring(p2.indexOf(",") + 1, p2.length()));
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    }

    private void movimientos() {
        String[] asdas = new String[nodos];
        for (int i = 0; i < nodos; i++) {
            asdas[i] = "" + i;
        }
        inservile(asdas, "", nodos, nodos);
    }

    private void inservile(String[] elem, String act, int n, int r) {
        if (n == 0) {
            String[] xd = act.split(",");
            for (int i = 0; i < xd.length; i++) {
                codificacion[x][i] = Integer.parseInt(xd[i]);
            }
            x++;
        } else {
            for (int i = 0; i < r; i++) {
                if (!act.contains(elem[i])) {
                    inservile(elem, act + elem[i] + ",", n - 1, r);
                }
            }
        }
    }

    private void malaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_malaMouseClicked

    }//GEN-LAST:event_malaMouseClicked

    public void nicolle() {
        long startTime = System.currentTimeMillis();
        //ArrayList<Point2D> cities = new ArrayList<>(Load.loadTSPLib("rl10.tsp")); //alter file name here.
        
        ArrayList<Point2D> nearestN;
        ArrayList<Point2D> result;

        double length = Length.routeLength(cities);
        System.out.println("Initial tour length is: " + length);
        //double time = System.currentTimeMillis() - startTime;
        //System.out.println("Time taken to initialize is: " + time);
        //System.out.println("Generating Nearest Neighbour Solution...");
        
        nearestN = Neighbour.nearest(cities);
        length = Length.routeLength(nearestN);
        //System.out.println("Nearest neighbour solution complete, distance: " + length);
        //System.out.println("Validating solution...");
        Validator.validate(nearestN);
        //time = System.currentTimeMillis() - startTime;
        //System.out.println("Time taken for init and Nearest Neighbour: " + time);

        //startTime = System.currentTimeMillis();
        //System.out.println("Attempting 2-opt optimisation...");
        result = TwoOpt.alternate(nearestN);
        long endTime = System.nanoTime();
        double duration = (double)((endTime - startTime)/1e6);
        length = Length.routeLength(result);
        System.out.println("2-opt solution complete, distance: " + length);
        //System.out.println("Validating solution...");
        Validator.validate(result);
        //time = System.currentTimeMillis() - startTime;
        System.out.println("Time taken for 2 opt optimisation: " + duration);

        //System.out.println("Resulting tour node count: " + result.size());
        for (Point2D point2D : result) {
            //System.out.println(point2D.getX() + "," + point2D.getY());
            opt_lista.add(point2D.getX() + "," + point2D.getY());
        }
    }


    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
       
        /*
        for (int i = 0; i < matriz2.length; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(matriz2[i][j]+" ");
            }
            System.out.println("");
        }*/

    }//GEN-LAST:event_jButton3MouseClicked

    private void nicolleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nicolleMouseClicked
        
        nicolle();
        
        String hola = styleSheet;
        Iterator<Edge> aristas1 = graph.getEdgeIterator();
        while (aristas1.hasNext()) {
            
            Edge temp = (Edge) aristas1.next();
            double x1, y1, x2, y2;
            String p1 = temp.getNode0().getAttribute("punto");
            
            String p2 = temp.getNode1().getAttribute("punto");
            x1 = Double.parseDouble(p1.substring(0, p1.indexOf(",")));
            y1 = Double.parseDouble(p1.substring(p1.indexOf(",") + 1, p1.length()));
            x2 = Double.parseDouble(p2.substring(0, p2.indexOf(",")));
            y2 = Double.parseDouble(p2.substring(p2.indexOf(",") + 1, p2.length()));
            for (int i = 0; i < opt_lista.size() - 1; i++) {
                //System.out.println("1: "+opt_lista.get(i));
                String Poi1 = opt_lista.get(i);
                String Poi2 = opt_lista.get(i + 1);
                String PP1 = x1 + "," + y1;
                String PP2 = x2 + "," + y2;
                if (Poi1.equals(PP1)) {
                    if (Poi2.equals(PP2)) {
                        String ID = temp.getId();
                        hola += "edge#" + ID + "{fill-color:yellow;size:4px;" + "text-size:15px;}";
                        temp.setAttribute("opt", "si");
                    }
                } else if (Poi1.equals(PP2)) {
                    if (Poi2.equals(PP1)) {
                        String ID = temp.getId();
                        hola += "edge#" + ID + "{fill-color:yellow;size:4px;" + "text-size:15px;}";
                        temp.setAttribute("opt", "si");
                    }
                }
            }
            String Poi1 = opt_lista.get(0);
            String Poi2 = opt_lista.get(opt_lista.size() - 1);
            String PP1 = x1 + "," + y1;
            String PP2 = x2 + "," + y2;
            if (Poi1.equals(PP1)) {
                if (Poi2.equals(PP2)) {
                    String ID = temp.getId();
                    hola += "edge#" + ID + "{fill-color:yellow;size:4px;" + "text-size:15px;}";
                    temp.setAttribute("opt", "si");
                }
            } else if (Poi1.equals(PP2)) {
                if (Poi2.equals(PP1)) {
                    String ID = temp.getId();
                    hola += "edge#" + ID + "{fill-color:yellow;size:4px;" + "text-size:15px;}";
                    temp.setAttribute("opt", "si");
                }
            }

            /*
            if(temp.getNode0().getAttribute("punto")){
                ciclo.get(i).setAttribute("opt", "si");
                String ID = ciclo.get(i).getId();
                hola += "edge#" + ID + "{fill-color:green;size:4px;" + "text-size:15px;}";
            }*/
        }
        SingleGraph graph_copy = new SingleGraph("Grafo copia");
        
        //graph_copy.setAttribute(styleSheet, hola);
        Iterator<Node> nodos = graph.getNodeIterator();

        Iterator<Edge> aristas = graph.getEdgeIterator();

        //copia cada nodo, agrega su label nombre si el parametro lo requiere
        while (nodos.hasNext()) {
            Node nodoTemp = nodos.next();
            String nombreNodo = nodoTemp.toString();
            graph_copy.addNode(nombreNodo).addAttribute("ui.label", nombreNodo);

        }
        int contadorAristas = 0;
        while (aristas.hasNext()) {
            Edge aristaTemp = aristas.next();
            if (aristaTemp.getAttribute("opt").equals("no")) {
                hola += "edge#" + aristaTemp.getId() + "{visibility-mode:hidden;}";
            }
            String nombreNodo1 = aristaTemp.getNode0().toString();
            String nombreNodo2 = aristaTemp.getNode1().toString();

            graph_copy.addEdge(contadorAristas + "", nombreNodo1, nombreNodo2, true);
            graph_copy.getEdge(contadorAristas).addAttribute("peso", (Object) aristaTemp.getAttribute("peso"));
            graph_copy.getEdge(contadorAristas).addAttribute("ui.label", (Object) aristaTemp.getAttribute("peso"));
            contadorAristas++;

        }
        graph_copy.addAttribute("ui.stylesheet", hola);
        graph_copy.display();
    }//GEN-LAST:event_nicolleMouseClicked
    /*

     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton mala;
    private javax.swing.JButton nicolle;
    private javax.swing.JPanel normal;
    private javax.swing.JPanel sol;
    // End of variables declaration//GEN-END:variables
    SingleGraph graph;
    String styleSheet = "";
    int matriz[][];
    ArrayList<Edge> ciclo = new ArrayList();
    ArrayList<ArrayList<String[]>> matrizMagica;
    ArrayList<ArrayList<Node>> lista_ciclos;
    ArrayList<String> opt_lista = new ArrayList();
    int codificacion[][];
    int nodos = 3;
    int x = 0;
    ArrayList<Point2D> cities; 
}
